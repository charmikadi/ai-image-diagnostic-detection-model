# -*- coding: utf-8 -*-
"""Trained_model_HSOC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oCV3P7hY2vXx4Z1Iz3xX-N5K7xyTCkNn
"""

import zipfile
import os

# The file will be in /content/ after uploading via file panel
with zipfile.ZipFile('/testing/ai-imaging-diagnosis.zip', 'r') as zip_ref:
    zip_ref.extractall('/testing/')

# List the contents
os.listdir('/testing/')

import os
os.chdir('/testing/ai-imaging-diagnosis')
print("Current directory:", os.getcwd())
print("Files:", os.listdir('.'))

# Install common ML/AI libraries for imaging
!pip install torch torchvision tensorflow keras opencv-python pillow matplotlib seaborn scikit-learn pandas numpy

# If there's a requirements.txt file, install from it
import os
if os.path.exists('requirements.txt'):
    !pip install -r requirements.txt

from google.colab import drive
drive.mount('/content/drive')

import os

# Check if your brain folder exists
data_path = '/content/drive/MyDrive/brain/brain-images'
print(f"Data path: {data_path}")
print(f"Path exists: {os.path.exists(data_path)}")

if os.path.exists(data_path):
    print("Contents:", os.listdir(data_path)[:5])  # First 5 items
else:
    print("Let's find your brain folder:")
    if os.path.exists('/content/drive/MyDrive'):
        print("MyDrive contents:", os.listdir('/content/drive/MyDrive'))

# Navigate to your AI project
import os
os.chdir('/testing/ai-imaging-diagnosis')
print("Current directory:", os.getcwd())
print("Project files:", os.listdir('.'))

# Install required dependencies
!pip install torch torchvision tensorflow keras opencv-python pillow matplotlib seaborn scikit-learn pandas numpy

# Check if there's a requirements file
if os.path.exists('requirements.txt'):
    !pip install -r requirements.txt
    print("‚úì Installed requirements from requirements.txt")
else:
    print("No requirements.txt found, using standard ML libraries")

# Let's examine your dataset organization
data_path = '/content/drive/MyDrive/brain/brain-images'

for folder in ['Training', 'Testing', 'Processed']:
    folder_path = os.path.join(data_path, folder)
    if os.path.exists(folder_path):
        print(f"\n {folder} folder:")
        items = os.listdir(folder_path)
        for item in items[:10]:  # Show first 10 items
            item_path = os.path.join(folder_path, item)
            if os.path.isdir(item_path):
                count = len(os.listdir(item_path))
                print(f"   {item}: {count} files")
            else:
                print(f"  üìÑ {item}")
        if len(items) > 10:
            print(f"  ... and {len(items)-10} more items")

# Remove the old config from memory and import fresh
import sys
if 'config' in sys.modules:
    del sys.modules['config']

# Now import the updated config
import config
import os

print("üîç Verifying updated paths:")
print(f"Base directory: {config.base_dir}")
print(f"Training directory: {config.train_dir}")
print(f"Testing directory: {config.test_dir}")

print(f"\nPath verification:")
print(f"Base exists: {os.path.exists(str(config.base_dir))}")
print(f"Training exists: {os.path.exists(str(config.train_dir))}")
print(f"Testing exists: {os.path.exists(str(config.test_dir))}")

if os.path.exists(str(config.train_dir)):
    print(f"Training classes: {os.listdir(str(config.train_dir))}")

# Install required packages for deep learning
!pip install torch torchvision pillow matplotlib seaborn scikit-learn pandas numpy

print("Dependencies installed!")

import torch
print(f"Device: {config.device}")
print(f"GPU available: {torch.cuda.is_available()}")
if torch.cuda.is_available():
    print(f"GPU name: {torch.cuda.get_device_name(0)}")

# Enable GPU in Colab if not already enabled:
# Go to Runtime ‚Üí Change runtime type ‚Üí Hardware accelerator ‚Üí GPU

# 1. Re-mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# 2. Re-extract your project (using the correct path)
import zipfile
import os

# The zip file is in /content/testing/ (not /testing/)
with zipfile.ZipFile('/content/testing/ai-imaging-diagnosis.zip', 'r') as zip_ref:
    zip_ref.extractall('/content/testing/')

print("Project extracted")
print("Contents of /content/testing/:", os.listdir('/content/testing/'))

# 3. Navigate to your project src folder
os.chdir('/content/testing/ai-imaging-diagnosis/src')
print(" Navigated to project src folder")
print("Current directory:", os.getcwd())
print("Project files:", os.listdir('.'))

# 4. Reload config to check GPU
import sys
if 'config' in sys.modules:
    del sys.modules['config']

# Import fresh config
import config
import torch

print(f"\n GPU Status after restart:")
print(f"Device: {config.device}")
print(f"GPU available: {torch.cuda.is_available()}")
if torch.cuda.is_available():
    print(f"GPU name: {torch.cuda.get_device_name(0)}")
    print(f"GPU memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
else:
    print("Still on CPU - make sure you enabled GPU in Runtime settings")

# 5. Verify your data paths still work
print(f"\nüìÅ Data path verification:")
print(f"Training path exists: {os.path.exists(str(config.train_dir))}")
print(f"Testing path exists: {os.path.exists(str(config.test_dir))}")

# The config got reset when we re-extracted. Let's fix it again
print("Current config content:")
with open('config.py', 'r') as f:
    current_config = f.read()
print(current_config)

print("\n" + "="*50)
print("FIXING CONFIG PATHS...")
print("="*50)

# Write the correct config
correct_config = '''from pathlib import Path
import torch

# Path setup - Correct paths for your data
base_dir = Path('/content/drive/MyDrive/brain/brain-images')
train_dir = base_dir / 'Training'
test_dir = base_dir / 'Testing'
model_save_path = Path('/content/model.pth')

# Training parameters
batch_size = 32
epochs = 10
lr = 0.001
image_size = (224, 224)
num_classes = 4  # meningioma, pituitary, notumor, glioma

# Device setup
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
'''

# Write the corrected config
with open('config.py', 'w') as f:
    f.write(correct_config)

print(" Config updated!")

# Remove old config from memory and reload
import sys
if 'config' in sys.modules:
    del sys.modules['config']

# Import fresh config
import config
import os

print(f"Updated path verification:")
print(f"Base dir: {config.base_dir}")
print(f"Training dir: {config.train_dir}")
print(f"Testing dir: {config.test_dir}")

print(f"\nPath existence check:")
print(f"Training path exists: {os.path.exists(str(config.train_dir))}")
print(f"Testing path exists: {os.path.exists(str(config.test_dir))}")

if os.path.exists(str(config.train_dir)):
    print(f"Training classes: {[d for d in os.listdir(str(config.train_dir)) if d != '.DS_Store']}")

print(f"\n Final status:")
print(f"Device: {config.device}")
print(f"GPU available: {torch.cuda.is_available()}")

# Install any missing dependencies first
!pip install torch torchvision pillow matplotlib seaborn scikit-learn pandas numpy

print("Starting training...")
!python main.py
